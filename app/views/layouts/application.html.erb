<!DOCTYPE html>
<html>
<head>
  <title>SiteResume</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>

  <script src="//js.pusher.com/2.2/pusher.min.js"></script>


  <script>
      // Enable pusher logging - don't include this in production
      Pusher.log = function(message) {
          if (window.console && window.console.log) {
             /*window.console.log(message);*/
          }
      };

      var pusher = new Pusher('bf3efe4f2a538719f902');
      var channel = pusher.subscribe('test_channel');
      var object_counter = {};

      channel.bind('my_event', function(data) {
          var object = data.message;

          for (var global_key in object_counter) {
              for( var object_key in object ) {
                  if(global_key==object_key) {
                      object_counter[global_key] += object[object_key];
                      delete object[object_key];
                  }
              }
          }

          _.extend(object_counter, object);

          var arr = sortObject(object_counter);
          arr = arr.slice(0,50);
          var duration = 750; // duration for transitions
          var fill = d3.scale.category20();
          var layout;
          var wordScale=d3.scale.linear().domain([1,75]).range([8,48]);

          console.log(arr);

          layout = d3.layout.cloud()
                      .timeInterval(2)
                      .size([1000, 1000])
                      .words(arr.map(function(d) {
                          return {text: d.text, size: d.weight };
                      }))
                      .padding(5)
                      .rotate(function() { return 0; })
                      .fontSize(function(d) { return wordScale(d.size); })
                      .on("end", draw);
              layout.start();

              function draw(words) {
                  var cloudGroup = d3.select("#wordcloud").select("svg")
                          .select("g")
                          .attr("transform", "translate(500,500)");

                  var cloudData = cloudGroup
                          .selectAll("text")
                          .data(words);


                  cloudData.enter().append("text")
                          .style("font-size", "0px")
                          .style("font-family", "Impact")
                          .style("fill", function(d) { return fill(d.text); })
                          .attr("text-anchor", "middle")
                          .attr("transform", function(d) {

                              return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                          })
                          .text(function(d) { return d.text; })
                          .transition().duration(duration).style("font-size", function(d) { return d.size + "px"; });


                  // This with updating existing data
                  cloudData.transition().duration(duration).style("font-size", "0px")
                          .style("font-size", "0px")
                          .attr("transform", function(d) {
                              return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                          })
                          .text(function(d) { return d.text; })
                          .style("font-size", function(d) { return d.size + "px"; });
                  cloudData
                          .exit()
                          .remove()
                          .transition().duration(duration).style("font-size", "0px");
              }
          d3.layout.cloud().stop();
      });
      function sortObject(obj) {
          var arr = [];
          for (var prop in obj) {
              if (obj.hasOwnProperty(prop)) {
                  arr.push({
                      'text': prop,
                      'weight': obj[prop]
                  });
              }
          }
          arr.sort(function(a, b) { return b.value - a.value; });
          //arr.sort(function(a, b) { a.value.toLowerCase().localeCompare(b.value.toLowerCase()); }); //use this to sort as strings
          return arr; // returns array
      }
  </script>

</head>
<header>
  <nav class="navbar navbar-default navbar-fixed-top">
    <div class="container">
      <h4>Site Resume</h4>
    </div>
  </nav>
</header>
<body>

<%= yield %>

</body>
</html>
